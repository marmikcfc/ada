#!/usr/bin/env python3
"""
Ada Interaction Engine - Environment Setup Script

This script helps set up the environment variables needed for the Ada system.
It creates or updates the .env file with API keys and validates them.

Usage:
    python setup_env.py [--force]

Options:
    --force    Overwrite existing values in .env file
"""

import os
import sys
import argparse
import getpass
import asyncio
import json
from pathlib import Path
from typing import Dict, Any, Optional, List, Tuple

# Try to import OpenAI for validation
try:
    from openai import AsyncOpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    print("Warning: OpenAI package not installed. API key validation will be skipped.")
    print("Run: pip install openai")

# Constants
ENV_FILE = ".env"
REQUIRED_KEYS = ["OPENAI_API_KEY", "THESYS_API_KEY"]
OPTIONAL_KEYS = [
    "ANTHROPIC_API_KEY", 
    "SMITHERY_API_KEY", 
    "DEEPGRAM_API_KEY",
    "AGENT_MODEL",
    "AGENT_SQLITE_DB"
]

# Default values
DEFAULT_VALUES = {
    "AGENT_MODEL": "gpt-4o-mini",
    "AGENT_SQLITE_DB": "chat_history.db"
}

# Colors for terminal output
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def print_header(text: str):
    """Print a formatted header"""
    print(f"\n{Colors.HEADER}{Colors.BOLD}=== {text} ==={Colors.ENDC}\n")

def print_success(text: str):
    """Print a success message"""
    print(f"{Colors.GREEN}✓ {text}{Colors.ENDC}")

def print_warning(text: str):
    """Print a warning message"""
    print(f"{Colors.WARNING}⚠ {text}{Colors.ENDC}")

def print_error(text: str):
    """Print an error message"""
    print(f"{Colors.FAIL}✗ {text}{Colors.ENDC}")

def read_env_file() -> Dict[str, str]:
    """Read existing .env file if it exists"""
    env_vars = {}
    env_path = Path(ENV_FILE)
    
    if env_path.exists():
        print_success(f"Found existing {ENV_FILE} file")
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip()
    else:
        print_warning(f"No {ENV_FILE} file found. Will create a new one.")
    
    return env_vars

def write_env_file(env_vars: Dict[str, str]):
    """Write environment variables to .env file"""
    env_path = Path(ENV_FILE)
    
    # Create a backup if file exists
    if env_path.exists():
        backup_path = Path(f"{ENV_FILE}.bak")
        env_path.rename(backup_path)
        print_success(f"Created backup of existing {ENV_FILE} at {backup_path}")
    
    # Write new .env file with comments
    with open(env_path, 'w') as f:
        f.write("# Ada Interaction Engine - Environment Variables\n")
        f.write("# Generated by setup_env.py\n\n")
        
        # Write API keys section
        f.write("# API Keys\n")
        for key in REQUIRED_KEYS + ["ANTHROPIC_API_KEY", "SMITHERY_API_KEY", "DEEPGRAM_API_KEY"]:
            if key in env_vars and env_vars[key]:
                f.write(f"{key}={env_vars[key]}\n")
            else:
                f.write(f"# {key}=\n")
        
        # Write model settings section
        f.write("\n# Model Settings\n")
        for key in ["AGENT_MODEL", "ENHANCEMENT_MODEL", "THESYS_MODEL"]:
            if key in env_vars and env_vars[key]:
                f.write(f"{key}={env_vars[key]}\n")
            elif key in DEFAULT_VALUES:
                f.write(f"{key}={DEFAULT_VALUES[key]}\n")
            else:
                f.write(f"# {key}=\n")
        
        # Write database settings section
        f.write("\n# Database Settings\n")
        if "AGENT_SQLITE_DB" in env_vars and env_vars["AGENT_SQLITE_DB"]:
            f.write(f"AGENT_SQLITE_DB={env_vars['AGENT_SQLITE_DB']}\n")
        else:
            f.write(f"AGENT_SQLITE_DB={DEFAULT_VALUES['AGENT_SQLITE_DB']}\n")
    
    print_success(f"Wrote environment variables to {ENV_FILE}")

async def validate_openai_key(api_key: str) -> bool:
    """Validate OpenAI API key by making a test request"""
    if not OPENAI_AVAILABLE:
        return True  # Skip validation if OpenAI package not available
    
    try:
        client = AsyncOpenAI(api_key=api_key)
        models = await client.models.list()
        if hasattr(models, 'data') and len(models.data) > 0:
            print_success("OpenAI API key validated successfully")
            return True
        else:
            print_error("OpenAI API key validation failed: No models returned")
            return False
    except Exception as e:
        print_error(f"OpenAI API key validation failed: {str(e)}")
        return False

async def validate_thesys_key(api_key: str) -> bool:
    """Validate Thesys API key by making a test request"""
    if not OPENAI_AVAILABLE:
        return True  # Skip validation if OpenAI package not available
    
    try:
        client = AsyncOpenAI(
            api_key=api_key,
            base_url="https://api.thesys.dev/v1/visualize"
        )
        # Simple test message to check if the API key works
        messages = [{"role": "user", "content": "Hello"}]
        response = await client.chat.completions.create(
            model="c1-nightly",
            messages=messages,
            max_tokens=10
        )
        if response.choices and len(response.choices) > 0:
            print_success("Thesys API key validated successfully")
            return True
        else:
            print_error("Thesys API key validation failed: No response")
            return False
    except Exception as e:
        print_error(f"Thesys API key validation failed: {str(e)}")
        return False

def prompt_for_value(key: str, current_value: Optional[str] = None, required: bool = False) -> str:
    """Prompt user for a value, with current value as default"""
    prompt_text = f"Enter {key}"
    if current_value:
        prompt_text += f" [current: {current_value[:5]}...{current_value[-5:]} - press Enter to keep]"
    elif key in DEFAULT_VALUES:
        prompt_text += f" [default: {DEFAULT_VALUES[key]}]"
    prompt_text += ": "
    
    # Use getpass for API keys
    if "API_KEY" in key:
        value = getpass.getpass(prompt_text)
    else:
        value = input(prompt_text)
    
    # Return current value if user just pressed Enter
    if not value and current_value:
        return current_value
    
    # Return default value if user just pressed Enter and no current value
    if not value and key in DEFAULT_VALUES:
        return DEFAULT_VALUES[key]
    
    # If required and still no value, prompt again
    if required and not value:
        print_warning(f"{key} is required")
        return prompt_for_value(key, current_value, required)
    
    return value

async def setup_env_vars(force: bool = False):
    """Set up environment variables by prompting user and validating"""
    print_header("Ada Interaction Engine - Environment Setup")
    
    # Read existing .env file
    env_vars = read_env_file()
    
    # Prompt for required API keys
    print_header("Required API Keys")
    for key in REQUIRED_KEYS:
        current_value = env_vars.get(key, "")
        if force or not current_value:
            env_vars[key] = prompt_for_value(key, current_value, required=True)
    
    # Validate API keys
    print_header("Validating API Keys")
    if OPENAI_AVAILABLE:
        openai_valid = await validate_openai_key(env_vars["OPENAI_API_KEY"])
        thesys_valid = await validate_thesys_key(env_vars["THESYS_API_KEY"])
        
        if not openai_valid or not thesys_valid:
            retry = input("Some API keys failed validation. Retry? (y/n): ").lower()
            if retry == 'y':
                if not openai_valid:
                    env_vars["OPENAI_API_KEY"] = prompt_for_value("OPENAI_API_KEY", required=True)
                if not thesys_valid:
                    env_vars["THESYS_API_KEY"] = prompt_for_value("THESYS_API_KEY", required=True)
                
                # Validate again
                print_header("Re-validating API Keys")
                await validate_openai_key(env_vars["OPENAI_API_KEY"])
                await validate_thesys_key(env_vars["THESYS_API_KEY"])
    
    # Prompt for optional API keys and settings
    print_header("Optional API Keys and Settings")
    for key in OPTIONAL_KEYS:
        current_value = env_vars.get(key, DEFAULT_VALUES.get(key, ""))
        if force or key not in env_vars:
            value = prompt_for_value(key, current_value)
            if value:
                env_vars[key] = value
    
    # Write environment variables to .env file
    write_env_file(env_vars)
    
    print_header("Setup Complete")
    print("You can now run the Ada Interaction Engine with:")
    print(f"{Colors.BLUE}python main_new.py{Colors.ENDC}")
    print(f"or use the development runner:")
    print(f"{Colors.BLUE}python run.py --reload{Colors.ENDC}")

def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(description="Set up environment variables for Ada Interaction Engine")
    parser.add_argument("--force", action="store_true", help="Force prompting for all values")
    args = parser.parse_args()
    
    # Run the async setup function
    asyncio.run(setup_env_vars(args.force))

if __name__ == "__main__":
    main()
